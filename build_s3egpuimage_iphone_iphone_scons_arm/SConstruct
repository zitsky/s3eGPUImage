# coding=utf-8
# Auto-generated scons script for building 's3eGPUImage_iphone'
# for the '('IPHONE', 'SCONS', 'ARM')' target
#
# ***WARNING***: if you edit this file your changes will be lost next time your
# ***WARNING***: run the mkb.

import os
import sys
import socket
import SCons
from os.path import join

SetOption("implicit_cache" ,1)

target_name = '/Users/lolsto/s3eGPUImage/lib/iphone/libs3eGPUImage.a'
target_name_debug = '/Users/lolsto/s3eGPUImage/lib/iphone/libs3eGPUImage_d.a'
target_name_rvct = '/Users/lolsto/s3eGPUImage/lib/iphone/libs3eGPUImage.a'
target_name_debug_rvct = '/Users/lolsto/s3eGPUImage/lib/iphone/libs3eGPUImage_d.a'
sdk_root = '/Developer/Marmalade/6.2'

scons_version = SCons.__version__.split(".")[:2]
scons_version = [int(x) for x in scons_version]
strip = 1

scons1_2 = scons_version >= [1,2]
if not scons1_2:
    BoolVariable = BoolOption
    Variables = Options

opts = Variables('build.conf')
opts.Add('CC', 'The C compiler.')
opts.Add('CXX', 'The C++ compiler.')
if not scons1_2:
    opts.AddVariables = opts.AddOptions
opts.AddVariables(
    BoolVariable('dist', 'use distcc compiler.', 0),
    BoolVariable('debug', 'use debug defines.', 0),
    BoolVariable('verbose', 'show command output', 0),
    BoolVariable('profile', 'add profiling support to all generated code', 0),
)

def SplitN(str):
    return filter(lambda x: x, str.split("\n"))

includes = SplitN(r'''
../source/h
../h
/Developer/Marmalade/6.2/s3e/edk/h
/Developer/Marmalade/6.2/s3e/h
/Developer/Marmalade/6.2/s3e/h/ext
/Developer/Marmalade/6.2/modules/iwutil/h
/Developer/Marmalade/6.2/modules/iwcore/h
../incoming
''')

libraries = SplitN(r'''

''')

libraries_d = SplitN(r'''

''')

libraries_rvct = SplitN(r'''

''')

libraries_rvct_d = SplitN(r'''

''')

extra_objects = SplitN(r'''
/Users/lolsto/s3eGPUImage/incoming/GPUImageExposureFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageBoxBlurFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImagePoissonBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageSepiaFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageHueFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageMedianFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageThresholdEdgeDetectionFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageGaussianSelectiveBlurFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageRGBDilationFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageLevelsFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageErosionFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageSubtractBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageFilterGroup.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageColorMatrixFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageThresholdedNonMaximumSuppressionFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageKuwaharaFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageMovieWriter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImagePixellatePositionFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImage3x3TextureSamplingFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageMissEtikateFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageShiTomasiFeatureDetectionFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageThresholdSketchFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageLuminosity.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageCrosshatchFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageTwoPassTextureSamplingFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageChromaKeyFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageDilationFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageColorPackingFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageRGBClosingFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageContrastFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageRGBOpeningFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageColorBurnBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageSoftEleganceFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageSaturationBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageSingleComponentFastBlurFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageNobleCornerDetectionFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageSketchFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageView.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageTwoPassFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageTiltShiftFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageGlassSphereFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageRGBErosionFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageMosaicFilter.o
/Users/lolsto/s3eGPUImage/incoming/GLProgram.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageLaplacianFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageMonochromeFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageDarkenBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImagePolkaDotFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageHueBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageColorBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageScreenBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageCannyEdgeDetectionFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageDirectionalNonMaximumSuppressionFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImagePolarPixellateFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageStretchDistortionFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageGaussianBlurPositionFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageSourceOverBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageToonFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageCrosshairGenerator.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageGrayscaleFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageLocalBinaryPatternFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageExclusionBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageRawDataOutput.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageHistogramGenerator.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageDifferenceBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageTwoInputFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageSphereRefractionFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageTextureOutput.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageWhiteBalanceFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageRawDataInput.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageOutput.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageLinearBurnBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageVideoCamera.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageSwirlFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageCGAColorspaceFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageOpacityFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageHighPassFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageLowPassFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageLuminosityBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageMaskFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageHardLightBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageZoomBlurFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageSingleComponentGaussianBlurFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageEmbossFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageContext.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageHalftoneFilter.o
/Users/lolsto/s3eGPUImage/incoming/GLGenTextCBImpl.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageColorInvertFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageParallelCoordinateLineTransformFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageBulgeDistortionFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageOverlayBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageMovie.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageLightenBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageNonMaximumSuppressionFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageXYDerivativeFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageWeakPixelInclusionFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImagePrewittEdgeDetectionFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageTransformFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageJFAVoronoiFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageFastBlurFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageTwoInputCrossTextureSamplingFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageThreeInputFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageAlphaBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageAddBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageFalseColorFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageRGBFilter.o
/Users/lolsto/s3eGPUImage/incoming/WrapAWrapper.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageFilterPipeline.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageVignetteFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageLanczosResamplingFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageKuwaharaRadius3Filter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageMotionDetector.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageHoughTransformLineDetector.o
/Users/lolsto/s3eGPUImage/incoming/GPUImagePicture.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageAverageLuminanceThresholdFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageAmatorkaFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageBrightnessFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageLookupFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageHarrisCornerDetectionFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImagePosterizeFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageHazeFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImagePixellateFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageStillCamera.o
/Users/lolsto/s3eGPUImage/incoming/GPUimageDirectionalSobelEdgeDetectionFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageHighlightShadowFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageAverageColor.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageTextureInput.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageSharpenFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageDivideBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageBilateralFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageChromaKeyBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageSoftLightBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageSolidColorGenerator.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageGammaFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageLineGenerator.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageUIElement.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageMultiplyBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageVoronoiConsumerFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImagePinchDistortionFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageLuminanceThresholdFilter.o
/Users/lolsto/s3eGPUImage/incoming/s3eGpuImageWrapper.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageClosingFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageDissolveBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageNormalBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageHistogramFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageColorDodgeBlendFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageMotionBlurFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageGaussianBlurFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImagePerlinNoiseFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageOpeningFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageSaturationFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageSobelEdgeDetectionFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageUnsharpMaskFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageAdaptiveThresholdFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageBuffer.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageToneCurveFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImage3x3ConvolutionFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageSmoothToonFilter.o
/Users/lolsto/s3eGPUImage/incoming/GPUImageCropFilter.o
''')

libpath = SplitN(r'''

''')

Extensions_sources = SplitN(r'''
../source/generic/s3eGPUImage.cpp
../source/generic/s3eGPUImage_register.cpp
../source/iphone/s3eGPUImage_platform.mm
''')


# Map of all libraries that we need to build
build_libs = {
}


build_libs_debug = {
}


# Map of all sources to build
modules = {
    'Extensions' : Extensions_sources,

}


source_flags = {
}

# Environment variables set by the mkb system
export_map = {
    'EDK_BUILDER' : '/Developer/Marmalade/6.2/s3e/edk/builder',
    'IPHONEOS_DEPLOYMENT_TARGET' : '3.0',
}

exports = Split("""
S3E_DIR
MARMALADE_ROOT
P4PASSWD
P4CONFIG
P4USER
P4CLIENT
P4TICKETS
ARMLMD_LICENSE_FILE
LM_LICENSE_FILE
CCACHE_LOGFILE
CCACHE_TEMPDIR
CCACHE_DIR
HOME
BREWTOOLSDIR
BTILDIR
TEMP
TMP
LIB
INCLUDE
DMUCS_SERVER
DISTCC_HOSTS
DISTCC_VERBOSE
CODESIGN_ALLOCATE
IPHONEOS_DEPLOYMENT_TARGET
MAXOSX_DEPLOYMENT_TARGET
SYSTEMROOT
""")

for export in exports:
    if export not in export_map and export in os.environ:
        export_map[export] = os.environ[export]

arch = "ARM"

gcc_variants = ["gcc", "arm-none-linux-gnueabi-gcc", "arm-linux-gnu-gcc", "arm-none-eabi-gcc", 'mipsel-linux-uclibc-gcc', 'mips-linux-gnu-gcc']

#
# Figure out what compiler to use
#
compiler = 'llvm-gcc'
if 'compiler' in ARGUMENTS:
    compiler = ARGUMENTS['compiler']

if compiler == 'rvct':
    target_name = target_name_rvct
    target_name_debug = target_name_debug_rvct
    includes += "."

if compiler == 'msvc':
    tools = ['msvc', 'mslink', 'mslib']
else:
    tools = ['gcc', 'g++', 'ar', 'link', 'as']


paths = [
    r'/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin',
    r'/Applications/Xcode.app/Contents/Developer/usr/bin',
    r'/opt/local/bin',
]

path = []

def add_to_path(p, prepend=0):
    global path
    if prepend:
        path.insert(0, p)
    else:
        path.append(p)

if os.name == 'nt':
    add_to_path("C:\windows\system32")

if os.name == 'posix':
    add_to_path("/bin")
    add_to_path("/usr/bin")
    add_to_path("/usr/sbin")

for p in reversed(paths):
    add_to_path(p, prepend=1)

os.environ['PATH'] = os.pathsep.join(path)

env=Environment(
tools=tools,
options=opts,
ENV={'PATH':path},
MSVC_VERSION="6.0",
CPPPATH=includes,
LIBPATH=libpath,
PLFLAGS=[],
STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME='true',
_CPPINCFLAGS='$( ${_concat(INCPREFIX, CPPPATH, INCSUFFIX, __env__)} $)',
)


Help(opts.GenerateHelpText(env))

if env['debug']:
    build_libs = build_libs_debug
    temp_defines = 'temp_defines_debug.h'
    builddir = "debug"
    target_name = target_name_debug
    libraries = libraries_d
    libraries_rvct = libraries_rvct_d
else:
    temp_defines = 'temp_defines_release.h'
    builddir = "release"

if compiler == "rvct":
    libraries = libraries_rvct
    builddir += "_rvct"


if compiler == 'rvct':
    env.Append(LINKFLAGS=[])
    if env['debug']:
        env.Append(CCFLAGS=['-g', '-O0', '--no_inline', '--preinclude=temp_defines_debug.h'])
        env.Append(LINKFLAGS=[])
        env.Append(PLFLAGS=[])
    else:
        env.Append(CCFLAGS=['-Otime', '-O3', '--preinclude=temp_defines_release.h'])
        env.Append(LINKFLAGS=[])
    env.Append(CCFLAGS=['--split_sections', '--diag_remark=1,9,111,128,174,177,196,381,550,611,815,1293,1294,1295,1299,1300,1304,3052', '--no_exceptions', '--apcs=/interwork', '--cpu=7-A'])
    env.Append(CFLAGS=[])
    env.Append(CXXFLAGS=['--cpp'])
    env['ARFLAGS'] = ['--create']
    env['ASFLAGS'] = ['-g', '--apcs=/interwork', '--cpu=7-A']
    env['STRIPFLAGS'] = []
    env['CXXCOM'] = '$CXX -o $TARGET -c $CCFLAGS $CXXFLAGS $_CCCOMCOM $SOURCES'
    env['SHCCFLAGS'] = SCons.Util.CLVar('$CCFLAGS -fPIC')

else:
    env.Append(LINKFLAGS=['-arch', 'armv7', '-dead_strip', '-isysroot', '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.1.sdk', '-miphoneos-version-min=3.0'])
    if env['debug']:
        env.Append(CCFLAGS=['-g', '-O0', '-include', 'temp_defines_debug.h'])
        env.Append(LINKFLAGS=['-Wl,-map', '-Wl,/Users/lolsto/s3eGPUImage/lib/iphone/libs3eGPUImage_d.map'])
        env.Append(PLFLAGS=[])
    else:
        env.Append(CCFLAGS=['-O3', '-include', 'temp_defines_release.h'])
        env.Append(LINKFLAGS=['-Wl,-S', '-Wl,-x', '-Wl,-map', '-Wl,/Users/lolsto/s3eGPUImage/lib/iphone/libs3eGPUImage.map'])
    env.Append(CCFLAGS=['-fsigned-char', '-fno-strict-aliasing', '-Wall', '-fomit-frame-pointer', '-fmessage-length=0', '-Wno-unused', '-Wno-parentheses', '-pipe', '-arch', 'armv7', '-miphoneos-version-min=3.0', '-isysroot', '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.1.sdk', '-funsigned-char', '-fvisibility=default', '-gdwarf-2', '-mno-thumb'])
    env.Append(CFLAGS=['-std=gnu99'])
    env.Append(CXXFLAGS=['-fno-exceptions', '-fvisibility-inlines-hidden'])
    env['ARFLAGS'] = ['rc']
    env['ASFLAGS'] = []
    env['STRIPFLAGS'] = []
    env['CXXCOM'] = '$CXX -o $TARGET -c $CCFLAGS $CXXFLAGS $_CCCOMCOM $SOURCES'
    env['SHCCFLAGS'] = SCons.Util.CLVar('$CCFLAGS -fPIC')


env.Append(ENV=export_map)

if env['dist'] and compiler != "msvc":
    if 'DISTCC_HOSTS' not in env['ENV']:
        if env['verbose']:
            print "not using distcc as DISTCC_HOSTS is not set"
        env['dist'] = 0
    elif not env.WhereIs("distcc"):
        if env['verbose']:
            print "not using distcc as distcc not found in PATH"
        env['dist'] = 0

if not env['verbose']:
    env.Replace(
    CXXCOMSTR   ='Compiling [$CXX] $SOURCE',
    ASCOMSTR    ='Assembling [$AS] $SOURCE',
    CCCOMSTR    ='Compiling [$CC] $SOURCE',
    SHCXXCOMSTR ='Compiling [$CXX] $SOURCE',
    SHCCCOMSTR  ='Compiling [$CC] $SOURCE',
    LINKCOMSTR  ='Linking   [$LINK] $TARGET',
    ARCOMSTR    ='Librarian [$AR] $TARGET',
    SHLINKCOMSTR='Linking   [$SHLINK] $TARGET')

if env['debug']:
    strip = 0

if compiler == 'rvct':
    # Emitter specified tools:
    env['CC']     = ''
    env['CXX']    = ''
    env['LINK']   = ''
    env['AR']     = ''
    env['AS']     = ''
    env['STRIP']  = ''
    env['RANLIB'] = ''
else:
    # Emitter specified tools:
    env['CC']     = 'llvm-gcc-4.2'
    env['CXX']    = 'llvm-g++-4.2'
    env['LINK']   = 'llvm-g++-4.2'
    env['AR']     = 'ar'
    env['AS']     = 'llvm-as-4.2'
    env['STRIP']  = 'strip'
    env['RANLIB'] = 'ranlib'

# compiler settings for all ARM targets
env['FROMELF'] = 'fromelf'

if compiler == 'rvct':
    env['ENV']['CCACHE_EXTENSION'] = 'c'
    env['INCPREFIX'] = "-I"
    env['OBJSUFFIX'] = ".o"
    env['LIBSUFFIX'] = ".a"
    env['LIBPREFIX'] = ""
    env['CPPDEFPREFIX'] = "-D"
    env['CPPFLAGS'] = ""
    env['RANLIBCOM'] = ''
    env['LIBLINKPREFIX'] = ""
    env['SHCCFLAGS'] = "$CCFLAGS"
    env['SHCXXFLAGS'] = "$CXXFLAGS"
    env['LINKCOM'] = '$LINK -o $TARGET $LINKFLAGS $( $_LIBDIRFLAGS $) $_LIBFLAGS $_PDB $SOURCES'
    env['SHLINKCOM'] = '$LINK -o $TARGET $LINKFLAGS $( $_LIBDIRFLAGS $) $_LIBFLAGS $_PDB $SOURCES'
    env['CCCOMFLAGS'] = "-c $CPPFLAGS $_CPPINCFLAGS $_CPPDEFFLAGS -o$TARGET $SOURCES $CCPCHFLAGS $CCPDBFLAGS"
    env['ARCOM'] = "${TEMPFILE('$AR $ARFLAGS $TARGET $SOURCES')}"
    env['_LIBFLAGS'] = "$LIBS"
    if libpath:
        env['LINKFLAGS'] += Split('--userlibpath "%s"' % ','.join(libpath))
    env['CXXFLAGS'] = ["--cpp"]
    env['SHLINKFLAGS'] = "$LINKFLAGS"
    env['LIBPATH'] = []
    env['TEMPFILEPREFIX'] = '--via='

# compiler settings for non-s3e targets
if compiler in gcc_variants or compiler == 'qcc':
    env['PROGSUFFIX'] = ""

env['SHLINKFLAGS'] = '$LINKFLAGS -dynamiclib'

# Set a sensible default number of jobs, unless the user has specified
# a non-default number on the commandline.
if GetOption('num_jobs') == 1:
    # setup distcc where available
    if compiler in gcc_variants and env['dist']:
        # when doing parallel build use 2 * number of hosts as the numbre
        # if parallel jobs
        jobs = len(export_map['DISTCC_HOSTS'].split()) * 2
        print "Performing parallel build with %d jobs" % jobs
        SetOption('num_jobs', jobs)
        env['LD']  =  env['CC']
        env['CC']  = 'distcc %s' % env['CC']
        env['CXX'] = 'distcc %s' % env['CXX']
        if 'DMUCS_SERVER' in os.environ:
            env['CC']  = 'gethost %s' % env['CC']
            env['CXX'] = 'gethost %s' % env['CXX']
            SetOption('num_jobs', 6)
    elif compiler == 'rvct':
        pass
    else:
        try:
            # we still use python2.5 on win32 and multiprocessing is
            # not available.
            import multiprocessing
            maxjobs = multiprocessing.cpu_count() * 2
        except:
            maxjobs = 2
            if sys.platform == 'win32':
                try:
                    maxjobs = int(os.environ['NUMBER_OF_PROCESSORS']) * 2
                except (ValueError, KeyError):
                    pass
        SetOption('num_jobs', maxjobs)

if env.WhereIs("ccache"):
    env['CC']  = "ccache " + env['CC']
    env['CXX'] = "ccache " + env['CXX']


def remove(env, setting, flag):
    if flag in env[setting]:
        new_settings = list(env[setting])
        while flag in new_settings:
            new_settings.remove(flag)
        env[setting] = new_settings

if env['profile']:
    env.Append(CXXFLAGS="-pg", LINKFLAGS="-pg")

#
# this is the code the tells scons that we want all object files
# to go in our build dir.  Otherwise the object files end up in
# the same place as the source.
#

if not os.path.dirname(target_name):
    target_name = join(builddir, target_name)

nowarn_env = env.Clone()
arm_env = env.Clone()
thumb_env = env.Clone()
vfp_env = env.Clone()

if '-Wall' in nowarn_env['CCFLAGS'] or '-Wc,-Wall' in nowarn_env['CCFLAGS']:
    nowarn_env['CCFLAGS'] = list(nowarn_env['CCFLAGS'])
    remove(nowarn_env, 'CCFLAGS', '-Wall')
    remove(nowarn_env, 'CCFLAGS', '-Wc,-Wall')
    nowarn_env.Append(CCFLAGS='-w')


if compiler != 'rvct':
    #Replacing these with the working 'remove' code below caused
    #issues replacing the '-mthumb' portion of -mthumb-interwork
    remove(arm_env, 'CCFLAGS', '-mthumb')
    remove(arm_env, 'CCFLAGS', '--thumb')
    remove(arm_env, 'ASFLAGS', '-mthumb')
    remove(arm_env, 'ASFLAGS', '--thumb')

    remove(vfp_env, 'CCFLAGS', '-msoft-float')
    remove(vfp_env, 'ASFLAGS', '-msoft-float')
    remove(vfp_env, 'CCFLAGS', '-mthumb')
    remove(vfp_env, 'CCFLAGS', '--thumb')

    if '-mfpu=vfp' not in vfp_env['CCFLAGS']:
        vfp_env.Append(CCFLAGS='-mfpu=vfp')
    if '-mfpu=vfp' not in vfp_env['ASFLAGS']:
        vfp_env.Append(ASFLAGS='-mfpu=vfp')

if compiler == "rvct":
    if '--thumb' not in thumb_env['CCFLAGS']:
        thumb_env.Append(CCFLAGS='--thumb')
        thumb_env.Append(ASFLAGS='--thumb')
else:
    if '-mthumb' not in thumb_env['CCFLAGS']:
        thumb_env.Append(CCFLAGS='-mthumb')
        thumb_env.Append(ASFLAGS='-mthumb')


if env['verbose']:
    print "CCFLAGS   = %s" % env['CCFLAGS']
    print "CXXFLAGS  = %s" % env['CXXFLAGS']
    #print "CPPFLAGS = %s" % env['CPPFLAGS']
    print "LINKFLAGS = %s" % env['LINKFLAGS']
    print "SHLINKFLAGS = %s" % env['SHLINKFLAGS']
    print "CC        = %s" % env['CC']
    print "CXX       = %s" % env['CXX']
    if 'DISTCC_HOSTS' in env['ENV']:
        print "DISTCC_HOSTS = %s" % env['ENV']['DISTCC_HOSTS']


objectivec_env = env.Clone()
objectivec_env.Append(CFLAGS=['-std=c99', '-x', 'objective-c'])

objectivecpp_env = env.Clone()
objectivecpp_env.Append(CXXFLAGS=['-x', 'objective-c++'])

objectivec_env.Append(CFLAGS=["-fobjc-abi-version=2", "-fobjc-legacy-dispatch"])
objectivecpp_env.Append(CXXFLAGS=["-fobjc-abi-version=2", "-fobjc-legacy-dispatch"])

def get_env(source):
    if source.endswith(".mm"):
        return objectivecpp_env
    if source.endswith(".m"):
        return objectivec_env
    flags = source_flags.get(source)
    if flags:
        if 'rvct' in flags and 'rvct' not in compiler:
            return None
        if 'gcc' in flags:
            if "ARM" not in arch:
                return None
            if 'gcc' not in compiler and 'qcc' not in compiler:
                return None

        if 'gccnowarn' in flags:
            return nowarn_env
        if 'vfp' in flags:
            return vfp_env
        if 'arm' in flags:
            return arm_env
        if 'thumb' in flags:
            return thumb_env
    return env

shared_objects = []
objects = []
objnames = []
for module in modules:
    for source in modules[module]:
        basename = os.path.basename(source)
        objname = os.path.splitext(basename)[0]
        objname = join(builddir, objname)
        if objname in objnames:
            i = 1
            orig = objname
            while objname in objnames:
                objname = orig + ("_%s" % i)
                i += 1
        objnames.append(objname)
        use_env = get_env(source)
        if use_env:
            objects.append(use_env.Object(objname, source))
            shared_objects.append(use_env.SharedObject(objname, source))

lib_build_targets=[]
libs = []
for lib in build_libs:
    objs = []
    libname = os.path.basename(lib)
    if libname in libraries:
        libraries.remove(libname)
    for source in build_libs[lib]:
        basename = os.path.basename(source)
        objname = os.path.splitext(basename)[0]
        objname = join(builddir, "lib_" + os.path.basename(lib), objname)
        use_env = get_env(source)
        obj = use_env.Object(objname, source)
        objs.append(obj)
    library = env.Library(lib, objs)
    env.Default(library)
    libs.append(library)
    if os.name == 'nt':
        library = str(library[0]).replace('\\', '/')
    lib_build_targets.append(library)

libs = []
for l in libraries:
    if compiler == 'rvct':
        if os.name == 'posix':
            l = l.replace("(", "\(")
            l = l.replace(")", "\)")
    else:
        # if we not using the arm compiler we strip of any extenation on library names
        base, ext = os.path.splitext(l)
        if ext in ['.lib', '.a']:
            l = base
    libs.append(l)

libraries = libs

env.Append(LIBS=libraries + lib_build_targets )

#
# Declare a program target for this project.
#

program = env.Program(join(builddir, 's3eGPUImage_iphone.prog'), objects + extra_objects)
env.Depends(program, temp_defines)

#
# Declare a shared library target for this project.
#

shared_library = env.SharedLibrary(join(builddir, 's3eGPUImage_iphone'), shared_objects + extra_objects)
env.Depends(shared_library, temp_defines)

#
# Declare a static library target for this project.
#

static_library = env.Library(target_name, objects + extra_objects)
env.Depends(static_library, temp_defines)

#
# Declare the *default* target(s) for this build
#

env['MAXLINELENGTH']=4096

default_target = static_library
if default_target:
    env.Default(default_target)
    env.Depends(default_target, temp_defines)

    # Uncoment this if you always want to link the final target
    #env.AlwaysBuild(default_target)
